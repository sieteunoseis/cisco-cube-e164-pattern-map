name: Build and Push Cisco CUBE E164 Pattern Map

on:
  push:
    branches: [ master ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ master ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    strategy:
      matrix:
        service: [frontend, backend]

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Log in to Container Registry
      if: github.event_name != 'pull_request'
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/${{ matrix.service }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=semver,pattern={{major}}
          type=raw,value=latest,enable={{is_default_branch}}
          type=sha

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: ./${{ matrix.service }}
        platforms: linux/amd64,linux/arm64
        push: ${{ github.event_name != 'pull_request' }}
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  test-docker:
    needs: build-and-push
    runs-on: ubuntu-latest
    if: github.event_name != 'pull_request'
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Test Docker deployment
      run: |
        cd docker
        # Use the existing .env file or create one if needed
        if [ ! -f .env ]; then
          if [ -f ../.env.example ]; then
            cp ../.env.example .env
            # Backend port no longer exposed, handled via proxy
            sed -i 's/NODE_ENV=development/NODE_ENV=production/' .env
          else
            # Create minimal .env file for E164 Pattern Map
            echo "VITE_BRANDING_URL=https://automate.builders" > .env
            echo "VITE_BRANDING_NAME=Cisco CUBE E164 Pattern Map" >> .env
            echo "VITE_BACKGROUND_LOGO_TEXT=AB" >> .env
            echo "VITE_TABLE_COLUMNS=label,pattern,description" >> .env
            echo "PORT=5001" >> .env
            echo "NODE_ENV=production" >> .env
            echo "UID=1000" >> .env
            echo "GID=1000" >> .env
          fi
        fi
        cp .env .env.test
        # Use the latest images
        export FRONTEND_TAG=latest
        export BACKEND_TAG=latest
        
        # Start services
        docker compose up -d
        
        # Wait for services
        sleep 30
        
        # Test frontend is accessible
        curl -f "http://localhost:3000" || exit 1
        
        # Test backend health endpoint via frontend proxy
        curl -f "http://localhost:3000/api/health" || exit 1
        
        # Test API through frontend proxy
        curl -f "http://localhost:3000/api/data" || exit 1
        
        # Cleanup
        docker compose down